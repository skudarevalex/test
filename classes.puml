@startuml name
class Database {
    - _conn: sqlite3.Connection
    - _cursor: sqlite3.Cursor
    + execute(query: str, params: tuple = ()): void
    + fetchall(query: str, params: tuple = ()): List[Dict[str, Any]]
    + fetchone(query: str, params: tuple = ()): Optional[Dict[str, Any]]
}

abstract class MLModel {
    {abstract} + predict(data: List[float]): List[float]
}

class SimpleMLModel extends MLModel {
    + predict(data: List[float]): List[float]
}

class User {
    - _id: int
    - _username: str
    - _password: str
    - _balance: int
    + id: int
    + username: str
    + balance: int
    + check_password(password: str): bool
    + add_balance(amount: int): void
    + subtract_balance(amount: int): bool
    + create(db: Database, username: str, password: str): User
    + get(db: Database, username: str, password: str): Optional[User]
}

class Transaction {
    - _id: int
    - _user_id: int
    - _amount: int
    - _timestamp: datetime
    - _description: str
    + create(db: Database, user_id: int, amount: int, description: str): Transaction
    + get_user_transactions(db: Database, user_id: int): List[Transaction]
}

class MLTask {
    - _id: int
    - _user_id: int
    - _model_id: int
    - _input_data: str
    - _output_data: Optional[str]
    - _status: str
    - _created_at: datetime
    - _cost: int
    + create(db: Database, user_id: int, model_id: int, input_data: str, output_data: Optional[str], status: str, cost: int): MLTask
    + get_user_tasks(db: Database, user_id: int): List[MLTask]
}

class UserService {
    - _db: Database
    + register(username: str, password: str): Dict[str, Any]
    + login(username: str, password: str): Dict[str, Any]
    + add_balance(user_id: int, amount: int): void
    + get_user_balance(user_id: int): Dict[str, Any]
}

class MLService {
    - _db: Database
    - _model_manager: MLModelManager
    + process_task(user: User, model_id: int, input_data: str): Dict[str, Any]
}

class MLModelManager {
    - _db: Database
    - _models: Dict[int, MLModel]
    + load_models(): void
    + get_model(model_id: int): Optional[MLModel]
}

Database <-- UserService : uses
Database <-- MLService : uses
Database <-- User : uses
Database <-- Transaction : uses
Database <-- MLTask : uses
Database <-- MLModelManager : uses
MLModel <|-- SimpleMLModel
MLModelManager <-- MLService : uses
User <-- UserService : manages
Transaction <-- UserService : manages
MLTask <-- MLService : manages
MLModel <-- MLModelManager : manages

@enduml